---- -*- Mode: rpl; -*-                                                                             
---- vim:syn=rosie
----
---- net.rpl     Rosie Pattern Language patterns for hostnames, ip addresses, and such
----
---- Â© Copyright IBM Corporation 2016, 2017.
---- LICENSE: MIT License (https://opensource.org/licenses/mit-license.html)
---- AUTHORS: Jamie A. Jennings, Kevin Zander


-- [1] RFC1123 Requirements for Internet Hosts -- Application and Support
-- (https:--tools.ietf.org/html/rfc1123) 
-- [2] RFC3696 Application Techniques for Checking and Transformation of Names
-- (https:--tools.ietf.org/html/rfc3696)

--import core? (for digit, letter)
--import num? (for num.hex)
-- make local in the case that `core` is not loaded?
alias net.digit = [:digit:]
alias net.letter = [:alpha:]
alias net.hex = { net.digit / [[a-f][A-F]] }


-- IP ADDRESSES
-- TODO: make local
alias net.ipv4_component = net.digit{1,3}
alias net.ip_address_v4 = { net.ipv4_component "." net.ipv4_component "." net.ipv4_component "." net.ipv4_component }
alias net.ipv6_component = net.hex{1,4}
alias net.ipv6_rest = { ":" net.ipv6_component }
-- ipv6 is complex, but we don't need to be as exact as rfc3986 is
-- this could be expanded a little more
alias net.ip_address_v6 = {
	{ net.ipv6_component net.ipv6_rest{7,7} } /
	{ net.ipv6_component net.ipv6_rest{0,5} "::" net.ipv6_component net.ipv6_rest{0,4} } /
	{ net.ipv6_component net.ipv6_rest{1,5} "::" } /
	{ "::" net.ipv6_component net.ipv6_rest{0,5} } /
	{ "::" }  -- undefined address
}

net.ipv4 = net.ip_address_v4
-- test net.ipv4 accepts "0.0.0.0", "1.2.234.123", "999.999.999.999"
-- test net.ipv4 rejects "1234.1.2.3"
-- TODO: add some more rejecting tests
net.ipv6 = net.ip_address_v6
-- test net.ipv6 accepts "::", "::1", "::face:b00c"
-- test net.ipv6 accepts "2001:0db8:0000:0000:0000:ff00:0042:8329", "2001:db8:0:0:0:ff00:42:8329", "2001:db8::ff00:42:8329"
-- TODO: add some rejecting tests

net.ip = net.ipv4 / net.ipv6
-- the above tests validate net.ip


-- FQDNs
-- TODO: make local
alias net.port_spec = { ":" net.digit+ }
alias net.dn_start = { net.letter / net.digit }
alias net.dn_rest = { net.letter / net.digit / "-" }+
alias net.dn_component1 = { net.letter net.dn_rest* }
alias net.dn_component2 = { { net.digit / "-" }+ net.dn_component1 }
alias net.dn_component = { net.dn_component1 / net.dn_component2 }
-- Qualified domain name (may not be fully qualified, but everyone knows the
-- abbreviation fqdn, so we'll use it).  An odd quirk of this pattern is
-- that when given "jj.raleigh.-.com", which is an illegal domain name, it
-- will match the prefix "jj.raleigh" because that part is legal name
-- syntax.  Blame the hostname spec if you don't like it.
alias net.fqdn_core = {net.dn_component {"." net.dn_component}+ net.port_spec?}
-- We try to avoid thinking that a dotted identifier is a hostname, e.g. this:
-- CentOS-6.5-x86_64-heat-swcfg_fcr01a.dal09.softlayer.com_port
net.fqdn =  { ![-_] net.fqdn_core {!"_"} }	    -- Note that [-_] is a set of two chars, - and _
net.host = net.fqdn
-- TODO: add fqdn tests


-- EMAIL ADDRESSES
-- Per RFC3696, the specification for the alias part of an email address is considerably more
-- involved than this simple pattern, which will may accept some invalid addresses and may reject
-- some valid ones.

alias net.email_char = { [:alnum:] / [!#$%\^&*()_-+=|\\'`~?/{}{}:;] }
alias net.email_alias_part = { net.email_char {net.email_char / "."}* }
net.email = { net.email_alias_part "@" net.fqdn }
-- test net.email accepts "me@here.com", "you+filter@somewhere.org"
-- TODO: add rejecting email strings


-- URI
-- URI syntax highly simplified here (e.g. no query parms)
net.protocol = {{net.letter+} "://"}
-- TODO: make local
alias net.pathchar = [:alpha:] / [:digit:] / "-" / "." / "_" / "~" / { "%" [:xdigit:] [:xdigit:] } / [!$&'()*+,;=] / ":" / "@"
net.path = { "/" net.pathchar* }*
net.url = {net.protocol {net.fqdn / net.ipv4}? net.path}
-- test net.url accepts "http://www.google.com", "http://google.com/"
-- test net.url accepts "https://www.github.com/jamiejennings/rosie-pattern-language"
-- test net.url accepts "ftp://some.ftp.net/path/to/file.zip"


-- HTTP commands
-- Some very simple HTTP patterns
-- TODO: make local?
alias net.http_command_name = "GET" / "HEAD" / "PUT" / "POST" / "DELETE" / 
                    "TRACE" / "OPTIONS" / "CONNECT" / "PATCH"
net.http_command = net.http_command_name (net.url / net.path)
net.http_version = {"HTTP" "/" net.digit+ "." net.digit+}     -- e.g. "HTTP1.1"

-- ANY pattern
-- Match an IP, FQDN/Host, Email, URL, or HTTP Command
net.any = net.ip / net.fqdn / net.email / net.url / net.http_command
